apply plugin: "java"
apply plugin: "checkstyle"
// apply plugin: "findbugs"

// forces javac 1.7 
// this could change but we should all use the same one
sourceCompatibility = 1.7

// compile with debugging symbols
compileJava.options.debugOptions.debugLevel = "source,lines,vars"

repositories {
  mavenCentral()
}

dependencies {
  testCompile 'junit:junit:4.+'
  compile files("lib/tools.jar")
}

// builds trace utility (from sun) as a jar
task trace(type: Jar) {
  baseName = "trace" // what to call the jar
  from(sourceSets.main.output) {
     // where to find the source code
      include "com/sun/tools/example/trace/**" 
  }

  // pulls in all dependencies (ie tools.jar) i think
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  // sets main class of jar (entry point)
  manifest.attributes("Main-Class": "com.sun.tools.example.trace.Trace")

}

task locals(type: Jar) {
  baseName = "locals"
  from(sourceSets.main.output) {
      include "org/group/jdiTest/locals/**" 
  }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest.attributes("Main-Class": "org.group.jdiTest.locals.Locals")

}

task breakpoints(type: Jar) {
  baseName = "breakpoints"
  from(sourceSets.main.output) {
      include "org/group/jdiTest/breakpoints/**" 
  }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest.attributes("Main-Class": "org.group.jdiTest.breakpoints.Breakpoints")

}

task debugger(type: Jar) {
  baseName = "debugger"
  from(sourceSets.main.output) {
      include "org/visualheap/debugger/**" 
  }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

  manifest.attributes("Main-Class": "org.visualheap.debugger.Debugger")

}

checkstyle {
  configFile = new File("sun_checks.xml")
  showViolations = false
  ignoreFailures = true
//  sourceSets {
//    main { 
//      java {
//        exclude "**/com/sun/**"
//        exclude "**/jdiTest/**"
//      }
//    }
//    test { 
//      java {
//        exclude "**"
//      }
//    }
//  }
}

task checkstyleReport << {
    ant.xslt(
        in: "$buildDir/reports/checkstyle/main.xml",
        style:"config/checkstyle/checkstyle-noframes.xsl",
        out:"$buildDir/reports/checkstyle/checkstyle.html"
    )
}

checkstyleReport.dependsOn checkstyleMain


// findbugs {
//   ignoreFailures = true
// }
// 
// tasks.withType(FindBugs) {
//   reports {
//     xml.enabled = false
//     html.enabled = true
//   }
// }
